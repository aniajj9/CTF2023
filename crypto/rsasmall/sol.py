n = 24190921197731954337103556183307128625061408767133287756381580753553329974757184188379227383686120654865028414286424406451408063549764859294504134017435113504505066963015574204952237932097692364376308154409271174325474755049113545465458884885426247872212019901816721713952182729830738461019959332285156529936596789852683784003576807638079837428026244475123422210343319639016470703946494980061478787420599583616763410221775819802420990943258944762699686428610412210478656746269179031641960571333628966383532113236259109707959081481500472567776057596718712979921223246791166869859997431734189284695996973653804693610907
e = 3
ct = 1683477242737435348623865557253967345395746179503366677650731125181125262013728620333516339134471874708422978249809477806967498471572422147330043989556046702618912634519087697348111711373169734666873207405015301993241449829


# from math import iqsrt
from Crypto.Util.number import long_to_bytes

def find_cube_root(n):
    lo = 0
    hi = 1 << ((n.bit_length() + 2) // 3)
    while lo < hi:
        mid = (lo+hi)//2
        if mid**3 < n:
            lo = mid+1
        else:
            hi = mid
    return lo

def is_perfect_cube(n):
    return find_cube_root(n)**3 == n

print(long_to_bytes(find_cube_root(ct)))